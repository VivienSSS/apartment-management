// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db_sqlite

import (
	"context"
	"database/sql"
)

const createBilling = `-- name: CreateBilling :one

INSERT INTO billing (
    id, deadline, billinginfo, to_user
)
VALUES (?, ?, ?, ?)
RETURNING id, deadline, billinginfo, to_user
`

type CreateBillingParams struct {
	ID          string
	Deadline    string
	Billinginfo string
	ToUser      string
}

// ##########################################
// BILLING CRUD Operations
// ##########################################
func (q *Queries) CreateBilling(ctx context.Context, arg CreateBillingParams) (Billing, error) {
	row := q.db.QueryRowContext(ctx, createBilling,
		arg.ID,
		arg.Deadline,
		arg.Billinginfo,
		arg.ToUser,
	)
	var i Billing
	err := row.Scan(
		&i.ID,
		&i.Deadline,
		&i.Billinginfo,
		&i.ToUser,
	)
	return i, err
}

const createBillingInfo = `-- name: CreateBillingInfo :one

INSERT INTO billing_info (
    id, roominfo, utilities, billing_id
)
VALUES (?, ?, ?, ?)
RETURNING id, roominfo, utilities, billing_id
`

type CreateBillingInfoParams struct {
	ID        string
	Roominfo  string
	Utilities string
	BillingID string
}

// ##########################################
// BILLING_INFO CRUD Operations
// ##########################################
func (q *Queries) CreateBillingInfo(ctx context.Context, arg CreateBillingInfoParams) (BillingInfo, error) {
	row := q.db.QueryRowContext(ctx, createBillingInfo,
		arg.ID,
		arg.Roominfo,
		arg.Utilities,
		arg.BillingID,
	)
	var i BillingInfo
	err := row.Scan(
		&i.ID,
		&i.Roominfo,
		&i.Utilities,
		&i.BillingID,
	)
	return i, err
}

const createBillingInfoUtility = `-- name: CreateBillingInfoUtility :one

INSERT INTO billing_info_utilities (
    id, total, floor, "to", utilitytype, billing_info_id
)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, total, floor, "to", utilitytype, billing_info_id
`

type CreateBillingInfoUtilityParams struct {
	ID            string
	Total         int64
	Floor         string
	To            string
	Utilitytype   string
	BillingInfoID string
}

// ##########################################
// BILLING_INFO_UTILITIES CRUD Operations
// ##########################################
func (q *Queries) CreateBillingInfoUtility(ctx context.Context, arg CreateBillingInfoUtilityParams) (BillingInfoUtility, error) {
	row := q.db.QueryRowContext(ctx, createBillingInfoUtility,
		arg.ID,
		arg.Total,
		arg.Floor,
		arg.To,
		arg.Utilitytype,
		arg.BillingInfoID,
	)
	var i BillingInfoUtility
	err := row.Scan(
		&i.ID,
		&i.Total,
		&i.Floor,
		&i.To,
		&i.Utilitytype,
		&i.BillingInfoID,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one

INSERT INTO rooms (
    id, unitname, floornumber, bldgnumber, price, capacity, rented_by
)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, unitname, floornumber, bldgnumber, price, capacity, rented_by
`

type CreateRoomParams struct {
	ID          string
	Unitname    string
	Floornumber int64
	Bldgnumber  int64
	Price       int64
	Capacity    int64
	RentedBy    sql.NullString
}

// ##########################################
// ROOMS CRUD Operations
// ##########################################
func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.ID,
		arg.Unitname,
		arg.Floornumber,
		arg.Bldgnumber,
		arg.Price,
		arg.Capacity,
		arg.RentedBy,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Unitname,
		&i.Floornumber,
		&i.Bldgnumber,
		&i.Price,
		&i.Capacity,
		&i.RentedBy,
	)
	return i, err
}

const createSchedule = `-- name: CreateSchedule :one

INSERT INTO schedules (
    id, room, purpose, maintenanceprice, scheduleddate, description, user
)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, room, purpose, maintenanceprice, scheduleddate, description, user
`

type CreateScheduleParams struct {
	ID               string
	Room             string
	Purpose          string
	Maintenanceprice int64
	Scheduleddate    string
	Description      sql.NullString
	User             string
}

// ##########################################
// SCHEDULES CRUD Operations
// ##########################################
func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.ID,
		arg.Room,
		arg.Purpose,
		arg.Maintenanceprice,
		arg.Scheduleddate,
		arg.Description,
		arg.User,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Room,
		&i.Purpose,
		&i.Maintenanceprice,
		&i.Scheduleddate,
		&i.Description,
		&i.User,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one

INSERT INTO transactions (
    id, paymentmethod, room, tenant, description, amount
)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, paymentmethod, room, tenant, description, amount
`

type CreateTransactionParams struct {
	ID            string
	Paymentmethod string
	Room          string
	Tenant        string
	Description   sql.NullString
	Amount        int64
}

// ##########################################
// TRANSACTIONS CRUD Operations
// ##########################################
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Paymentmethod,
		arg.Room,
		arg.Tenant,
		arg.Description,
		arg.Amount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Paymentmethod,
		&i.Room,
		&i.Tenant,
		&i.Description,
		&i.Amount,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO user (
    id, password, email, role, firstname, middlename, lastname, age, contactnumber, fbname
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, password, email, role, firstname, middlename, lastname, age, contactnumber, fbname
`

type CreateUserParams struct {
	ID            string
	Password      sql.NullString
	Email         string
	Role          string
	Firstname     string
	Middlename    sql.NullString
	Lastname      string
	Age           int64
	Contactnumber string
	Fbname        sql.NullString
}

// ##########################################
// USER CRUD Operations
// ##########################################
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Password,
		arg.Email,
		arg.Role,
		arg.Firstname,
		arg.Middlename,
		arg.Lastname,
		arg.Age,
		arg.Contactnumber,
		arg.Fbname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Age,
		&i.Contactnumber,
		&i.Fbname,
	)
	return i, err
}

const deleteBilling = `-- name: DeleteBilling :exec
DELETE FROM billing
WHERE id = ?
`

func (q *Queries) DeleteBilling(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBilling, id)
	return err
}

const deleteBillingInfo = `-- name: DeleteBillingInfo :exec
DELETE FROM billing_info
WHERE id = ?
`

func (q *Queries) DeleteBillingInfo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBillingInfo, id)
	return err
}

const deleteBillingInfoUtility = `-- name: DeleteBillingInfoUtility :exec
DELETE FROM billing_info_utilities
WHERE id = ?
`

func (q *Queries) DeleteBillingInfoUtility(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBillingInfoUtility, id)
	return err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = ?
`

func (q *Queries) DeleteRoom(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = ?
`

func (q *Queries) DeleteSchedule(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = ?
`

func (q *Queries) DeleteTransaction(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getBilling = `-- name: GetBilling :one
SELECT id, deadline, billinginfo, to_user
FROM billing
WHERE id = ?
`

func (q *Queries) GetBilling(ctx context.Context, id string) (Billing, error) {
	row := q.db.QueryRowContext(ctx, getBilling, id)
	var i Billing
	err := row.Scan(
		&i.ID,
		&i.Deadline,
		&i.Billinginfo,
		&i.ToUser,
	)
	return i, err
}

const getBillingInfo = `-- name: GetBillingInfo :one
SELECT id, roominfo, utilities, billing_id
FROM billing_info
WHERE id = ?
`

func (q *Queries) GetBillingInfo(ctx context.Context, id string) (BillingInfo, error) {
	row := q.db.QueryRowContext(ctx, getBillingInfo, id)
	var i BillingInfo
	err := row.Scan(
		&i.ID,
		&i.Roominfo,
		&i.Utilities,
		&i.BillingID,
	)
	return i, err
}

const getBillingInfoUtility = `-- name: GetBillingInfoUtility :one
SELECT id, total, floor, "to", utilitytype, billing_info_id
FROM billing_info_utilities
WHERE id = ?
`

func (q *Queries) GetBillingInfoUtility(ctx context.Context, id string) (BillingInfoUtility, error) {
	row := q.db.QueryRowContext(ctx, getBillingInfoUtility, id)
	var i BillingInfoUtility
	err := row.Scan(
		&i.ID,
		&i.Total,
		&i.Floor,
		&i.To,
		&i.Utilitytype,
		&i.BillingInfoID,
	)
	return i, err
}

const getRoom = `-- name: GetRoom :one
SELECT id, unitname, floornumber, bldgnumber, price, capacity, rented_by
FROM rooms
WHERE id = ?
`

func (q *Queries) GetRoom(ctx context.Context, id string) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Unitname,
		&i.Floornumber,
		&i.Bldgnumber,
		&i.Price,
		&i.Capacity,
		&i.RentedBy,
	)
	return i, err
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, room, purpose, maintenanceprice, scheduleddate, description, user
FROM schedules
WHERE id = ?
`

func (q *Queries) GetSchedule(ctx context.Context, id string) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Room,
		&i.Purpose,
		&i.Maintenanceprice,
		&i.Scheduleddate,
		&i.Description,
		&i.User,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, paymentmethod, room, tenant, description, amount
FROM transactions
WHERE id = ?
`

func (q *Queries) GetTransaction(ctx context.Context, id string) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Paymentmethod,
		&i.Room,
		&i.Tenant,
		&i.Description,
		&i.Amount,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, password, email, role, firstname, middlename, lastname, age, contactnumber, fbname
FROM user
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Age,
		&i.Contactnumber,
		&i.Fbname,
	)
	return i, err
}

const listBillingInfoUtilities = `-- name: ListBillingInfoUtilities :many
SELECT id, total, floor, "to", utilitytype, billing_info_id
FROM billing_info_utilities
`

func (q *Queries) ListBillingInfoUtilities(ctx context.Context) ([]BillingInfoUtility, error) {
	rows, err := q.db.QueryContext(ctx, listBillingInfoUtilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillingInfoUtility
	for rows.Next() {
		var i BillingInfoUtility
		if err := rows.Scan(
			&i.ID,
			&i.Total,
			&i.Floor,
			&i.To,
			&i.Utilitytype,
			&i.BillingInfoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBillingInfos = `-- name: ListBillingInfos :many
SELECT id, roominfo, utilities, billing_id
FROM billing_info
`

func (q *Queries) ListBillingInfos(ctx context.Context) ([]BillingInfo, error) {
	rows, err := q.db.QueryContext(ctx, listBillingInfos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillingInfo
	for rows.Next() {
		var i BillingInfo
		if err := rows.Scan(
			&i.ID,
			&i.Roominfo,
			&i.Utilities,
			&i.BillingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBillings = `-- name: ListBillings :many
SELECT id, deadline, billinginfo, to_user
FROM billing
`

func (q *Queries) ListBillings(ctx context.Context) ([]Billing, error) {
	rows, err := q.db.QueryContext(ctx, listBillings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Billing
	for rows.Next() {
		var i Billing
		if err := rows.Scan(
			&i.ID,
			&i.Deadline,
			&i.Billinginfo,
			&i.ToUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRooms = `-- name: ListRooms :many
SELECT id, unitname, floornumber, bldgnumber, price, capacity, rented_by
FROM rooms
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Unitname,
			&i.Floornumber,
			&i.Bldgnumber,
			&i.Price,
			&i.Capacity,
			&i.RentedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, room, purpose, maintenanceprice, scheduleddate, description, user
FROM schedules
`

func (q *Queries) ListSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, listSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Room,
			&i.Purpose,
			&i.Maintenanceprice,
			&i.Scheduleddate,
			&i.Description,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, paymentmethod, room, tenant, description, amount
FROM transactions
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Paymentmethod,
			&i.Room,
			&i.Tenant,
			&i.Description,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, password, email, role, firstname, middlename, lastname, age, contactnumber, fbname
FROM user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.Email,
			&i.Role,
			&i.Firstname,
			&i.Middlename,
			&i.Lastname,
			&i.Age,
			&i.Contactnumber,
			&i.Fbname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBilling = `-- name: UpdateBilling :one
UPDATE billing
SET 
    deadline = ?,
    billinginfo = ?,
    to_user = ?
WHERE id = ?
RETURNING id, deadline, billinginfo, to_user
`

type UpdateBillingParams struct {
	Deadline    string
	Billinginfo string
	ToUser      string
	ID          string
}

func (q *Queries) UpdateBilling(ctx context.Context, arg UpdateBillingParams) (Billing, error) {
	row := q.db.QueryRowContext(ctx, updateBilling,
		arg.Deadline,
		arg.Billinginfo,
		arg.ToUser,
		arg.ID,
	)
	var i Billing
	err := row.Scan(
		&i.ID,
		&i.Deadline,
		&i.Billinginfo,
		&i.ToUser,
	)
	return i, err
}

const updateBillingInfo = `-- name: UpdateBillingInfo :one
UPDATE billing_info
SET 
    roominfo = ?,
    utilities = ?,
    billing_id = ?
WHERE id = ?
RETURNING id, roominfo, utilities, billing_id
`

type UpdateBillingInfoParams struct {
	Roominfo  string
	Utilities string
	BillingID string
	ID        string
}

func (q *Queries) UpdateBillingInfo(ctx context.Context, arg UpdateBillingInfoParams) (BillingInfo, error) {
	row := q.db.QueryRowContext(ctx, updateBillingInfo,
		arg.Roominfo,
		arg.Utilities,
		arg.BillingID,
		arg.ID,
	)
	var i BillingInfo
	err := row.Scan(
		&i.ID,
		&i.Roominfo,
		&i.Utilities,
		&i.BillingID,
	)
	return i, err
}

const updateBillingInfoUtility = `-- name: UpdateBillingInfoUtility :one
UPDATE billing_info_utilities
SET 
    total = ?,
    floor = ?,
    "to" = ?,
    utilitytype = ?,
    billing_info_id = ?
WHERE id = ?
RETURNING id, total, floor, "to", utilitytype, billing_info_id
`

type UpdateBillingInfoUtilityParams struct {
	Total         int64
	Floor         string
	To            string
	Utilitytype   string
	BillingInfoID string
	ID            string
}

func (q *Queries) UpdateBillingInfoUtility(ctx context.Context, arg UpdateBillingInfoUtilityParams) (BillingInfoUtility, error) {
	row := q.db.QueryRowContext(ctx, updateBillingInfoUtility,
		arg.Total,
		arg.Floor,
		arg.To,
		arg.Utilitytype,
		arg.BillingInfoID,
		arg.ID,
	)
	var i BillingInfoUtility
	err := row.Scan(
		&i.ID,
		&i.Total,
		&i.Floor,
		&i.To,
		&i.Utilitytype,
		&i.BillingInfoID,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms
SET 
    unitname = ?,
    floornumber = ?,
    bldgnumber = ?,
    price = ?,
    capacity = ?,
    rented_by = ?
WHERE id = ?
RETURNING id, unitname, floornumber, bldgnumber, price, capacity, rented_by
`

type UpdateRoomParams struct {
	Unitname    string
	Floornumber int64
	Bldgnumber  int64
	Price       int64
	Capacity    int64
	RentedBy    sql.NullString
	ID          string
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoom,
		arg.Unitname,
		arg.Floornumber,
		arg.Bldgnumber,
		arg.Price,
		arg.Capacity,
		arg.RentedBy,
		arg.ID,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Unitname,
		&i.Floornumber,
		&i.Bldgnumber,
		&i.Price,
		&i.Capacity,
		&i.RentedBy,
	)
	return i, err
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedules
SET 
    room = ?,
    purpose = ?,
    maintenanceprice = ?,
    scheduleddate = ?,
    description = ?,
    user = ?
WHERE id = ?
RETURNING id, room, purpose, maintenanceprice, scheduleddate, description, user
`

type UpdateScheduleParams struct {
	Room             string
	Purpose          string
	Maintenanceprice int64
	Scheduleddate    string
	Description      sql.NullString
	User             string
	ID               string
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, updateSchedule,
		arg.Room,
		arg.Purpose,
		arg.Maintenanceprice,
		arg.Scheduleddate,
		arg.Description,
		arg.User,
		arg.ID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Room,
		&i.Purpose,
		&i.Maintenanceprice,
		&i.Scheduleddate,
		&i.Description,
		&i.User,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET 
    paymentmethod = ?,
    room = ?,
    tenant = ?,
    description = ?,
    amount = ?
WHERE id = ?
RETURNING id, paymentmethod, room, tenant, description, amount
`

type UpdateTransactionParams struct {
	Paymentmethod string
	Room          string
	Tenant        string
	Description   sql.NullString
	Amount        int64
	ID            string
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.Paymentmethod,
		arg.Room,
		arg.Tenant,
		arg.Description,
		arg.Amount,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Paymentmethod,
		&i.Room,
		&i.Tenant,
		&i.Description,
		&i.Amount,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE user
SET 
    password = ?,
    email = ?,
    role = ?,
    firstname = ?,
    middlename = ?,
    lastname = ?,
    age = ?,
    contactnumber = ?,
    fbname = ?
WHERE id = ?
RETURNING id, password, email, role, firstname, middlename, lastname, age, contactnumber, fbname
`

type UpdateUserParams struct {
	Password      sql.NullString
	Email         string
	Role          string
	Firstname     string
	Middlename    sql.NullString
	Lastname      string
	Age           int64
	Contactnumber string
	Fbname        sql.NullString
	ID            string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Password,
		arg.Email,
		arg.Role,
		arg.Firstname,
		arg.Middlename,
		arg.Lastname,
		arg.Age,
		arg.Contactnumber,
		arg.Fbname,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Age,
		&i.Contactnumber,
		&i.Fbname,
	)
	return i, err
}
